import tensorflow as tf
import numpy as np
from PIL import Image

# Define the paths for content and style images
content_image_path = "content_image.jpg"
style_image_path = "style_image.jpg"

# Load and preprocess the images
def load_and_preprocess_image(image_path):
    img = tf.io.read_file(image_path)
    img = tf.image.decode_image(img, channels=3)
    img = tf.image.convert_image_dtype(img, tf.float32)
    img = tf.image.resize(img, [400, 400])  # Resize to a standard size
    img = img[tf.newaxis, :]  # Add batch dimension
    return img

content_image = load_and_preprocess_image(content_image_path)
style_image = load_and_preprocess_image(style_image_path)

# Load a pre-trained VGG19 model (you can also use other models like VGG16)
vgg = tf.keras.applications.VGG19(include_top=False, weights='imagenet')

# Content and style layers
content_layers = ['block5_conv2']
style_layers = [
    'block1_conv1',
    'block2_conv1',
    'block3_conv1',
    'block4_conv1',
    'block5_conv1'
]
num_content_layers = len(content_layers)
num_style_layers = len(style_layers)

# Function to get the VGG model with specified layers
def get_model():
    vgg.trainable = False
    content_outputs = [vgg.get_layer(name).output for name in content_layers]
    style_outputs = [vgg.get_layer(name).output for name in style_layers]
    model_outputs = content_outputs + style_outputs
    return tf.keras.Model(vgg.input, model_outputs)

# Define the loss functions
def content_loss(content, target):
    return tf.reduce_mean(tf.square(content - target))

def gram_matrix(input_tensor):
    result = tf.linalg.einsum('bijc,bijd->bcd', input_tensor, input_tensor)
    input_shape = tf.shape(input_tensor)
    num_locations = tf.cast(input_shape[1]*input_shape[2], tf.float32)
    return result / num_locations

def style_loss(style, gram_target):
    return tf.reduce_mean(tf.square(gram_matrix(style) - gram_target))

# Function to extract features
def extract_features(model, content_path, style_path):
    content_image = load_and_preprocess_image(content_path)
    style_image = load_and_preprocess_image(style_path)
    style_outputs = model(style_image)
    content_outputs = model(content_image)
    style_features = [style_layer[0] for style_layer in style_outputs[num_content_layers:]]
    content_features = [content_layer[0] for content_layer in content_outputs[:num_content_layers]]
    return style_features, content_features

# Compute the total loss
def compute_loss(model, loss_weights, init_image, gram_style_features, content_features):
    style_weight, content_weight = loss_weights
    model_outputs = model(init_image)
    style_output_features = model_outputs[num_content_layers:]
    content_output_features = model_outputs[:num_content_layers]
    style_score = 0
    content_score = 0
    weight_per_style_layer = 1.0 / float(num_style_layers)
    for target_style, comb_style in zip(gram_style_features, style_output_features):
        style_score += weight_per_style_layer * style_loss(comb_style[0], target_style)
    weight_per_content_layer = 1.0 / float(num_content_layers)
    for target_content, comb_content in zip(content_features, content_output_features):
        content_score += weight_per_content_layer * content_loss(comb_content[0], target_content)
    style_score *= style_weight
    content_score *= content_weight
    total_loss = style_score + content_score
    return total_loss, style_score, content_score

# Function to compute gradients
def compute_grads(cfg):
    with tf.GradientTape() as tape:
        all_loss = compute_loss(**cfg)
    total_loss = all_loss[0]
    return tape.gradient(total_loss, cfg['init_image']), all_loss

# Function to run neural style transfer
def run_style_transfer(content_path, style_path, num_iterations=1000, content_weight=1e3, style_weight=1e-2):
    model = get_model()
    for layer in model.layers:
        layer.trainable = False
    style_features, content_features = extract_features(model, content_path, style_path)
    gram_style_features = [gram_matrix(style_feature) for style_feature in style_features]
    init_image = load_and_preprocess_image(content_path)
    init_image = tf.Variable(init_image, dtype=tf.float32)
    optimizer = tf.optimizers.Adam(learning_rate=5, beta_1=0.99, epsilon=1e-1)
    loss_weights = (style_weight, content_weight)
    cfg = {
        'model': model,
        'loss_weights': loss_weights,
        'init_image': init_image,
        'gram_style_features': gram_style_features,
        'content_features': content_features
    }
    best_loss, best_img = float('inf'), None
    for i in range(num_iterations):
        grads, all_loss = compute_grads(cfg)
        loss, style_score, content_score = all_loss
        optimizer.apply_gradients([(grads, init_image)])
        if loss < best_loss:
            best_loss = loss
            best_img = init_image.numpy()
            best_img = best_img.reshape(best_img.shape[1:])
        if i % 100 == 0:
            print("Iteration {}, Loss: {}".format(i, loss))
    return best_img

# Run style transfer
output_image = run_style_transfer(content_image_path, style_image_path)

# Save and display the output image
output_image = np.clip(output_image, 0, 1)
output_image = Image.fromarray((output_image * 255).astype(np.uint8))
output_image.save("output_image.jpg")
output_image.show()
